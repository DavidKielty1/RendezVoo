// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using , postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    createdAt   DateTime    @default(now())
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    meetups       Meetup[]
    savedMeetups  SavedMeetup[] 
    comments      Comment[]
    location      String?
    description   String?
    likes         Like[]
}

model Meetup {
    id          String          @id @default(cuid())
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    title       String
    description String
    location    String
    time        String
    image       String
    user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    comments    Comment[]       
    type        String          @default("Point")
    coordinates Float[]   
    savedBy     SavedMeetup[]   
}

model SavedMeetup {
    id        String   @id @default(cuid())
    userId    String
    meetupId  String
    user      User     @relation(fields: [userId], references: [id])
    meetup    Meetup   @relation(fields: [meetupId], references: [id], onDelete: Cascade)

    @@unique([userId, meetupId]) 
}

model Comment {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    author      String
    content     String      @db.Text
    meetupId    String     
    userId      String
    parentId    String?     
    meetup      Meetup      @relation(fields: [meetupId], references: [id], onDelete: Cascade)
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    parent      Comment?    @relation("CommentToComment", fields: [parentId], references: [id])
    replies     Comment[]   @relation("CommentToComment")
    likes       Like[]
}

model Like {
    id        String        @id @default(cuid())
    userId    String
    commentId String
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment   Comment       @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId])
}