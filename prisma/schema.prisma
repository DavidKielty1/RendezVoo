generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  name          String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  location      String?
  description   String?
  accounts      Account[]
  comments      Comment[]
  likes         Like[]
  meetups       Meetup[]
  savedMeetups  SavedMeetup[]
  sessions      Session[]
  contactedBy   UserContact[] @relation("ContactedBy")
  contacts      UserContact[] @relation("UserContacts")
}

model UserContact {
  id        String @id @default(cuid())
  userId    String
  contactId String
  contact   User   @relation("ContactedBy", fields: [contactId], references: [id])
  user      User   @relation("UserContacts", fields: [userId], references: [id])

  @@unique([userId, contactId])
}

model Meetup {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  description String
  location    String
  time        String
  image       String
  userId      String
  type        String        @default("Point")
  coordinates Float[]
  comments    Comment[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedBy     SavedMeetup[]
}

model SavedMeetup {
  id       String @id @default(cuid())
  userId   String
  meetupId String
  meetup   Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, meetupId])
}

model Comment {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    String
  content   String
  meetupId  String
  userId    String
  parentId  String?
  meetup    Meetup    @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToComment")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  id        String  @id @default(cuid())
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}
